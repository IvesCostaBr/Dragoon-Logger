name: Pipeline DEV_STG

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Ambiente de deploy
        options: 
        - development
        - staging
        required: true

# required secrets
# G_ACCESS_TOKEN
# GOOGLE_CREDENTIALS
# KUBE_CONFIG
# DNS_DEV
# DNS_STG
# CONFIG_MAP_DEV
# CONFIG_MAP_STG
env:
  PROJECT_ID: '${{ secrets.PROJECT_ID }}'
  IMAGE: '${{ secrets.REPO_IMAGE_NAME }}'
  TAG: '${{ github.sha }}'
  CLUSTER_NAME: '${{ secrets.CLUSTER_NAME_STG }}'
  NAMESPACE: '${{github.event.inputs.environment}}'
  IMAGE_PATH: 'gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_IMAGE_NAME }}:${{ github.sha }}'
  DNS_STG: ${{ secrets.DNS_STG }}
  DNS_DEV: ${{ secrets.DNS_DEV }}
  KUBE_CONFIG: '${{ secrets.KUBE_CONFIG_STG }}'

jobs:
  environmentDriven:
    name: environment exec
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: '${{ github.ref }}'

    - name: 'Display Environment Deploy'
      run: |
        echo "ENVIROMENT EXEC : $NAMESPACE"

  checkoutImage:
    name: Image Valid
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: '${{ github.ref }}'

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: get image gcr
      id: get_image_repo
      run: |
        existing_tags=$(gcloud container images list-tags --filter="tags:${{ env.TAG }}" --format=json gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }})
        if [[ "$existing_tags" == "[]" ]]; then
            echo "result=0" >> "$GITHUB_OUTPUT"
        else
            echo "result=1" >> "$GITHUB_OUTPUT"
        fi
    outputs:
      value: ${{ steps.get_image_repo.outputs.result }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ checkoutImage ]
    if: ${{needs.checkoutImage.outputs.value == 0}}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: '${{ github.ref }}'

    - name: valid result
      run: echo '${{ needs.checkoutImage.outputs.value }}'

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
    
    - uses: RafikFarhad/push-to-gcr-github-action@v5-beta
      with:
        registry: gcr.io
        project_id: ${{ env.PROJECT_ID }}
        image_name: ${{ env.IMAGE }}
        image_tag: ${{ env.TAG }}
        dockerfile: ./Dragoon-Log/Dockerfile
        context: ./Dragoon-Log/
        
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: '${{ github.ref }}'

      - uses: azure/setup-kubectl@v3
        with:
            version: 'latest'
        id: install 

      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfg
          context: "${{ env.CLUSTER_NAME }}"
          kubeconfig: "${{ env.KUBE_CONFIG }}"

      - name: Render k8s manifests
        run: |
          if [[ ${{ env.NAMESPACE }} == 'development' ]];then
              export DNS_BASE='${{ env.DNS_DEV }}'
          else
              export DNS_BASE='${{ env.DNS_STG }}'
          fi
          envsubst < ./kubernetes/deployment.template.yaml &> ./kubernetes/deployment.yaml
          envsubst < ./kubernetes/ingress.template.yaml &> ./kubernetes/ingress.yaml
          # envsubst < ./kubernetes/hpa.template.yaml &> ./kubernetes/hpa.yaml

      - name: Deploy to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          manifests: |
            ./kubernetes/deployment.yaml
            ./kubernetes/ingress.yaml
          images: ${{ env.IMAGE_PATH }}
